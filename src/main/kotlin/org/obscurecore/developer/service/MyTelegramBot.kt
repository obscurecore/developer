package org.obscurecore.developer.service

import java.io.ByteArrayInputStream
import java.net.URI
import org.obscurecore.developer.dto.BotState
import org.obscurecore.developer.dto.ScrapeSettings
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
import org.springframework.http.HttpEntity
import org.springframework.http.HttpHeaders
import org.springframework.http.MediaType
import org.springframework.stereotype.Component
import org.springframework.util.LinkedMultiValueMap
import org.springframework.web.client.RestTemplate
import org.telegram.telegrambots.bots.TelegramLongPollingBot
import org.telegram.telegrambots.meta.api.methods.send.SendDocument
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.objects.InputFile
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow
import org.telegram.telegrambots.meta.exceptions.TelegramApiException

@Component
class MyTelegramBot(
    @Value("\${telegram.bot.token}") private val botToken: String,
    @Value("\${telegram.bot.username}") private val botUsername: String,
    @Value("\${api.base-url}") private val apiBaseUrl: String
) : TelegramLongPollingBot() {

    private val logger = LoggerFactory.getLogger(MyTelegramBot::class.java)
    private val restTemplate = RestTemplate()
    private val MAX_MESSAGE_LENGTH = 4000

    // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private val userStates = mutableMapOf<Long, BotState>()
    private val userScrapeSettings = mutableMapOf<Long, ScrapeSettings>()

    override fun getBotToken() = botToken
    override fun getBotUsername() = botUsername

    override fun onUpdateReceived(update: Update?) {
        if (update == null) return

        if (update.hasMessage()) {
            val message = update.message
            val chatId = message.chatId
            val text = message.text ?: ""

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –≤–ø–µ—Ä–≤—ã–µ, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
            if (!userStates.containsKey(chatId)) {
                userStates[chatId] = BotState.IDLE
                userScrapeSettings[chatId] = ScrapeSettings()
                showMainMenu(chatId, "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                return
            }

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /menu –∏–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if (text.trim().equals("/menu", ignoreCase = true) || text.trim() == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") {
                userStates[chatId] = BotState.IDLE
                userScrapeSettings[chatId] = ScrapeSettings()
                showMainMenu(chatId, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                return
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (Excel –∏–ª–∏ PDF)
            if (message.hasDocument()) {
                when (userStates[chatId]) {
                    BotState.WAITING_FILE -> {
                        handleExcelFileUpload(message.document, chatId)
                        return
                    }
                    BotState.WAITING_PDF_FILE -> {
                        handlePdfFileUpload(message.document, chatId)
                        return
                    }
                    else -> { }
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            when (userStates.getOrDefault(chatId, BotState.IDLE)) {
                BotState.IDLE -> {
                    when (text) {
                        "üìä –°–∫—Ä–∞–ø–∏—Ç—å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è" -> {
                            userStates[chatId] = BotState.SELECT_SCRAPE_TYPE
                            sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", buildScrapeTypeKeyboard())
                        }
                        "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel LandPlot" -> {
                            userStates[chatId] = BotState.WAITING_FILE
                            sendMessageWithKeyboard(chatId, "–ü—Ä–∏—à–ª–∏—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx)", buildBackToMenuKeyboard())
                        }
                        "üñº –ò–∑–≤–ª–µ—á—å PDF –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" -> {
                            userStates[chatId] = BotState.WAITING_PDF_FILE
                            sendMessageWithKeyboard(chatId, "–ü—Ä–∏—à–ª–∏—Ç–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç (.pdf)", buildBackToMenuKeyboard())
                        }
                        else -> {
                            sendLongMessage(chatId.toString(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /menu.")
                        }
                    }
                }
                BotState.SELECT_SCRAPE_TYPE -> {
                    when (text) {
                        "–¢–µ–∫—Å—Ç" -> {
                            userScrapeSettings.getOrPut(chatId) { ScrapeSettings() }.excel = false
                            userStates[chatId] = BotState.SELECT_SCRAPE_DISTRICTS
                            sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω(—ã) –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:", buildDistrictKeyboard(chatId))
                        }
                        "Excel" -> {
                            userScrapeSettings.getOrPut(chatId) { ScrapeSettings() }.excel = true
                            userStates[chatId] = BotState.SELECT_SCRAPE_DISTRICTS
                            sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω(—ã) –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:", buildDistrictKeyboard(chatId))
                        }
                        else -> {
                            sendLongMessage(chatId.toString(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
                        }
                    }
                }
                BotState.SELECT_SCRAPE_DISTRICTS -> {
                    when (text) {
                        "–ì–æ—Ç–æ–≤–æ" -> {
                            performScrape(chatId)
                        }
                        else -> {
                            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞; –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –≥–∞–ª–æ—á–∫–æ–π ‚Äì —É–±–∏—Ä–∞–µ–º –µ—ë, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º
                            val district = text.replace("‚úîÔ∏è ", "")
                            toggleDistrictSelection(chatId, district)
                            sendMessageWithKeyboard(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω(—ã) –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ (–æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã):", buildDistrictKeyboard(chatId))
                        }
                    }
                }
                else -> {
                    sendLongMessage(chatId.toString(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /menu.")
                }
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ReplyKeyboardMarkup.
     */
    private fun sendMessageWithKeyboard(chatId: Long, text: String, keyboard: ReplyKeyboardMarkup) {
        val msg = SendMessage().apply {
            this.chatId = chatId.toString()
            this.text = text
            this.replyMarkup = keyboard
        }
        try {
            execute(msg)
        } catch (e: TelegramApiException) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: ${e.message}", e)
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.
     */
    private fun showMainMenu(chatId: Long, text: String) {
        sendMessageWithKeyboard(chatId, text, buildMainMenuKeyboard())
    }

    /**
     * –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–º–∏ –≤ —Å—Ç–∏–ª–µ "Material View".
     */
    private fun buildMainMenuKeyboard(): ReplyKeyboardMarkup {
        val keyboard = ReplyKeyboardMarkup()
        val row1 = KeyboardRow().apply { add("üìä –°–∫—Ä–∞–ø–∏—Ç—å —É—á—Ä–µ–∂–¥–µ–Ω–∏—è") }
        val row2 = KeyboardRow().apply { add("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel LandPlot") }
        val row3 = KeyboardRow().apply { add("üñº –ò–∑–≤–ª–µ—á—å PDF –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è") }
        keyboard.keyboard = listOf(row1, row2, row3)
        keyboard.resizeKeyboard = true
        keyboard.oneTimeKeyboard = false
        return keyboard
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞.
     */
    private fun buildScrapeTypeKeyboard(): ReplyKeyboardMarkup {
        val keyboard = ReplyKeyboardMarkup()
        val row1 = KeyboardRow().apply {
            add("–¢–µ–∫—Å—Ç")
            add("Excel")
        }
        val row2 = KeyboardRow().apply { add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") }
        keyboard.keyboard = listOf(row1, row2)
        keyboard.resizeKeyboard = true
        keyboard.oneTimeKeyboard = false
        return keyboard
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–æ–≤.
     * –û—Ç–º–µ—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –≥–∞–ª–æ—á–∫–æ–π.
     */
    private fun buildDistrictKeyboard(chatId: Long): ReplyKeyboardMarkup {
        val keyboard = ReplyKeyboardMarkup()
        val settings = userScrapeSettings.getOrPut(chatId) { ScrapeSettings() }
        val available = listOf("AVIA", "VAHI", "KIRO", "MOSC", "NOVO", "PRIV", "SOVI")
        val rows = mutableListOf<KeyboardRow>()
        available.chunked(3).forEach { chunk ->
            val row = KeyboardRow()
            chunk.forEach { district ->
                val isSelected = settings.districts.contains(district)
                val buttonText = if (isSelected) "‚úîÔ∏è $district" else district
                row.add(buttonText)
            }
            rows.add(row)
        }
        val lastRow = KeyboardRow().apply {
            add("–ì–æ—Ç–æ–≤–æ")
            add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        }
        rows.add(lastRow)
        keyboard.keyboard = rows
        keyboard.resizeKeyboard = true
        keyboard.oneTimeKeyboard = false
        return keyboard
    }

    /**
     * –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
     */
    private fun buildBackToMenuKeyboard(): ReplyKeyboardMarkup {
        val keyboard = ReplyKeyboardMarkup()
        val row = KeyboardRow().apply { add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") }
        keyboard.keyboard = listOf(row)
        keyboard.resizeKeyboard = true
        keyboard.oneTimeKeyboard = false
        return keyboard
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞.
     */
    private fun toggleDistrictSelection(chatId: Long, district: String) {
        val settings = userScrapeSettings.getOrPut(chatId) { ScrapeSettings() }
        if (settings.districts.contains(district)) settings.districts.remove(district)
        else settings.districts.add(district)
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∞–ø–∏–Ω–≥ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
     */
    private fun performScrape(chatId: Long) {
        val settings = userScrapeSettings[chatId] ?: ScrapeSettings()
        val urlBuilder = StringBuilder("$apiBaseUrl/scrape?update=true")
        if (settings.excel) urlBuilder.append("&excel=true")
        if (settings.districts.isNotEmpty()) urlBuilder.append("&districts=${settings.districts.joinToString(",")}")
        val finalUrl = urlBuilder.toString()

        sendMessageWithKeyboard(chatId, "–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞...", buildBackToMenuKeyboard())

        try {
            if (settings.excel) {
                val responseEntity = restTemplate.getForEntity(URI(finalUrl), ByteArray::class.java)
                val fileBytes = responseEntity.body
                if (responseEntity.statusCode.is2xxSuccessful && fileBytes != null && fileBytes.isNotEmpty()) {
                    sendDocument(chatId, fileBytes, "institutions.xlsx", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel")
                } else {
                    sendLongMessage(chatId.toString(), "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.")
                }
            } else {
                val response = restTemplate.getForObject(finalUrl, String::class.java)
                if (response.isNullOrEmpty()) {
                    sendLongMessage(chatId.toString(), "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
                } else {
                    sendLongMessage(chatId.toString(), response)
                }
            }
        } catch (ex: Exception) {
            sendLongMessage(chatId.toString(), "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ: ${ex.message}")
        } finally {
            userStates[chatId] = BotState.IDLE
            userScrapeSettings[chatId] = ScrapeSettings()
        }
    }

    private fun handleExcelFileUpload(document: org.telegram.telegrambots.meta.api.objects.Document, chatId: Long) {
        try {
            val filePath = downloadFilePath(document.fileId)
            val fileBytes = downloadFileAsBytes(filePath)
            val resultText = uploadExcelToServer(fileBytes, document.fileName ?: "uploaded.xlsx")
            sendLongMessage(chatId.toString(), resultText)
        } catch (ex: Exception) {
            sendLongMessage(chatId.toString(), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ${ex.message}")
        } finally {
            userStates[chatId] = BotState.IDLE
        }
    }

    private fun handlePdfFileUpload(document: org.telegram.telegrambots.meta.api.objects.Document, chatId: Long) {
        try {
            val filePath = downloadFilePath(document.fileId)
            val fileBytes = downloadFileAsBytes(filePath)
            val resultBytes = uploadPdfToServer(fileBytes, document.fileName ?: "uploaded.pdf")
            if (resultBytes.isNotEmpty()) {
                sendDocument(chatId, resultBytes, "extracted_images.zip", "–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            } else {
                sendLongMessage(chatId.toString(), "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
            }
        } catch (ex: Exception) {
            sendLongMessage(chatId.toString(), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF: ${ex.message}")
        } finally {
            userStates[chatId] = BotState.IDLE
        }
    }

    private fun uploadExcelToServer(fileBytes: ByteArray, originalFilename: String): String {
        val url = "$apiBaseUrl/uploadLandplots?text=true"
        val headers = HttpHeaders().apply {
            contentType = MediaType.MULTIPART_FORM_DATA
        }
        val body = LinkedMultiValueMap<String, Any>()
        val fileResource = object : org.springframework.core.io.ByteArrayResource(fileBytes) {
            override fun getFilename() = originalFilename
        }
        body.add("file", fileResource)
        val requestEntity = HttpEntity(body, headers)
        val response = restTemplate.postForEntity(url, requestEntity, String::class.java)
        return if (response.statusCode.is2xxSuccessful && !response.body.isNullOrEmpty()) response.body!!
        else "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${response.statusCodeValue}"
    }

    private fun uploadPdfToServer(fileBytes: ByteArray, originalFilename: String): ByteArray {
        val url = "$apiBaseUrl/extractPdfImages"
        val headers = HttpHeaders().apply {
            contentType = MediaType.MULTIPART_FORM_DATA
        }
        val body = LinkedMultiValueMap<String, Any>()
        val fileResource = object : org.springframework.core.io.ByteArrayResource(fileBytes) {
            override fun getFilename() = originalFilename
        }
        body.add("file", fileResource)
        val requestEntity = HttpEntity(body, headers)
        val response = restTemplate.postForEntity(url, requestEntity, ByteArray::class.java)
        return response.body ?: ByteArray(0)
    }

    private fun sendDocument(chatId: Long, fileBytes: ByteArray, fileName: String, caption: String) {
        val sendDoc = SendDocument().apply {
            this.chatId = chatId.toString()
            this.document = InputFile(ByteArrayInputStream(fileBytes), fileName)
            this.caption = caption
        }
        try {
            execute(sendDoc)
        } catch (e: TelegramApiException) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${e.message}", e)
            sendLongMessage(chatId.toString(), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${e.message}")
        }
    }

    private fun downloadFilePath(fileId: String): String {
        val file = execute(org.telegram.telegrambots.meta.api.methods.GetFile(fileId))
        return file.filePath
    }

    private fun downloadFileAsBytes(filePath: String): ByteArray {
        return downloadFileAsStream(filePath).readBytes()
    }

    private fun sendLongMessage(chatId: String, text: String) {
        text.chunked(MAX_MESSAGE_LENGTH).forEach { part ->
            val msg = SendMessage(chatId, part)
            try {
                execute(msg)
            } catch (e: TelegramApiException) {
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${e.message}", e)
            }
        }
    }
}